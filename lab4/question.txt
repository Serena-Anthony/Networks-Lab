Question : Concurrent UDP SERVER -> Calc Avg of temp & battery values send by servers 

#include <arpa/inet.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>   
#include <sys/socket.h>
#include <unistd.h>

// The arguments needed to send a response
struct thread_arguments {
  char            station[STATION_SIZE];
  struct sockaddr client_address;
  socklen_t       client_length;
};


// The entry point for the threads
static void *send_response(void *arg)
{
  char  out[TEMPERATURE_SIZE];
  int   fd;
  struct thread_arguments *args;

  // Cast the arguments
  args = (struct thread_arguments *)arg;

  memset(&out, 0, TEMPERATURE_SIZE);
  sprintf(out, "%5.1f", forecast_for(args->station));

  fd = socket(AF_INET, SOCK_DGRAM, 0); 
  sendto(fd, out, TEMPERATURE_SIZE, 0, &(args->client_address), args->client_length);
  close(fd);

  // Free the memory used by the arguments
  // (Caller Allocates/Callee Frees)
  free(args);
  
  return NULL;
}

  


int
main(void)
{
  char    in[STATION_SIZE];
  int     fd;
  pthread_t  helper;
  struct sockaddr_in address, client_address;
  struct thread_arguments *args;
  socklen_t client_length = sizeof(struct sockaddr);
  
  // Create an IP4/UDP socket
  fd = socket(AF_INET, SOCK_DGRAM, 0); 
  
  // Initialize the address of this host
  memset(&address, 0, sizeof(address));
  address.sin_family = AF_INET;
  address.sin_port = htons(FORECAST_PORT);
  address.sin_addr.s_addr = htonl(INADDR_ANY); // In case the host has multiple

  // Bind the socket to the address
  bind(fd, (struct sockaddr *)&address, sizeof(struct sockaddr));

  // Process requests
  while (1)
    {
      // Receive the request
      recvfrom(fd, in, STATION_SIZE, 0,
               (struct sockaddr *)&client_address, &client_length);

      // Make a copy of the message and the client address
      // for the thread that will handle the response
      // (Caller Allocates/Callee Frees)
      args = (struct thread_arguments *)malloc(sizeof(struct thread_arguments));
      strncpy(args->station, in, STATION_SIZE);
      memcpy(&(args->client_address), &client_address, client_length);
      args->client_length  = client_length;

      // Create a thread to handle the response
      pthread_create(&helper, NULL, send_response, (void *)args);
      pthread_detach(helper);
    }
  
  close(fd);
}
        